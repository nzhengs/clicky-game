{"version":3,"sources":["components/Navbar/navbar.js","components/Jumborton/jumbotron.js","components/ImageCard/image.js","components/Footer/Footer.js","components/Wrapper/wrapper.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","href","message","score","topScore","Jumbotron","class","ImageCard","alt","imageCard","id","src","imageLink","onClick","clickImage","Footer","Wrapper","children","imageCards","clicked","count","App","state","storeTopScore","currentScore","resetData","forEach","onImageClick","find","_this","endGame","onCorrectGuess","setState","shuffle","_this2","this","Navbar_navbar","Wrapper_wrapper","Jumborton_jumbotron","map","components_ImageCard_image","components_Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e8e85ffc.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../Navbar/navbar.css\";\n\nfunction Navbar(props) {\n  return (\n    <nav>\n      <ul className=\"navbar \">\n        <li>\n          <a className=\"navbar-brand nav-title\" href=\"/\">\n            Test Your Memory\n          </a>\n        </li>\n        <li>\n          <strong className={props.message === \"Your Guess is Correct\"? \"correct\" : props.message === \"Your Guess is Incorrect\"? \"incorrect\": \"default\" }>{props.message}</strong>\n        </li>\n        <li>\n          <strong>Score:</strong> {props.score}\n          <br/>\n          <strong>Top Score:</strong> {props.topScore}\n          \n        </li>\n      </ul>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\r\nimport \"../Jumborton/jumbotron.css\";\r\n\r\nfunction Jumbotron() {\r\n  return (\r\n    <div class=\"container size\">\r\n    <h1 class=\"game-title\">Clicky Game</h1>\r\n    <p class=\"game-description\">Click on an image to earn points, Failure to click unique image will lead to game end</p>\r\n</div>\r\n  );\r\n}\r\n\r\nexport default Jumbotron;\r\n","import React from \"react\";\r\nimport \"../ImageCard/image.css\";\r\n\r\nfunction ImageCard(props) {\r\n  return (\r\n      <div className=\"card container col-3 \">\r\n        <div className=\"img-container \">\r\n          <img\r\n            alt={props.imageCard.id}\r\n            src={props.imageCard.imageLink}\r\n            className=\"image-icon\"\r\n            onClick={() => {\r\n              props.clickImage(props.imageCard.id);\r\n            }}\r\n          />\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImageCard;\r\n","import React from \"react\";\r\nimport \"../Footer/Footer.css\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer class=\"sticky-footer\">\r\n      <div class=\"container\">\r\n        <span class=\"text\">Developed by Anjana H</span>\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport \"../Wrapper/wrapper.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;","import React, { Component } from \"react\";\nimport shuffle from \"lodash/shuffle\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar/navbar\";\nimport Jumbotron from \"./components/Jumborton/jumbotron.js\";\nimport ImageCard from \"./components/ImageCard/image.js\";\nimport Footer from \"./components/Footer/Footer.js\"\nimport Wrapper from \"./components/Wrapper/wrapper.js\"\nconst imageCards = [\n  {\n    id: 1,\n    imageLink: \"https://www.flaticon.com/premium-icon/icons/svg/166/166552.svg\",\n    clicked: false\n  },\n  {\n    id: 2,\n    imageLink: \"https://www.flaticon.com/premium-icon/icons/svg/166/166563.svg\",\n    clicked: false\n  },\n  {\n    id: 3,\n    imageLink: \"https://www.flaticon.com/premium-icon/icons/svg/166/166556.svg\",\n    clicked: false\n  },\n  {\n    id: 4,\n    imageLink: \"https://www.flaticon.com/premium-icon/icons/svg/166/166553.svg\",\n    clicked: false\n  },\n  {\n    id: 5,\n    imageLink: \"https://www.flaticon.com/premium-icon/icons/svg/166/166540.svg\",\n    clicked: false\n  },\n  {\n    id: 6,\n    imageLink: \"https://www.flaticon.com/premium-icon/icons/svg/166/166548.svg\",\n    clicked: false\n  },\n  {\n    id: 7,\n    imageLink: \"https://www.flaticon.com/premium-icon/icons/svg/166/166537.svg\",\n    clicked: false\n  },\n  {\n    id: 8,\n    imageLink: \"https://www.flaticon.com/premium-icon/icons/svg/166/166557.svg\",\n    clicked: false\n  },\n  {\n    id: 9,\n    imageLink: \"https://www.flaticon.com/premium-icon/icons/svg/166/166556.svg\",\n    clicked: false\n  },\n  {\n    id: 10,\n    imageLink: \"https://www.flaticon.com/premium-icon/icons/svg/166/166539.svg\",\n    clicked: false\n  },\n  {\n    id: 11,\n    imageLink: \"https://www.flaticon.com/premium-icon/icons/svg/166/166534.svg\",\n    clicked: false\n  },\n  {\n    id: 12,\n    imageLink: \"https://www.flaticon.com/premium-icon/icons/svg/166/166564.svg\",\n    clicked: false\n  }\n];\nlet count = 0;\nlet topScore = 0;\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    imageCards,\n    message: \"Click an Image to begin\"\n  };\n\n  storeTopScore = currentScore => {\n    if (currentScore > topScore) {\n      topScore = currentScore;\n    }\n  };\n\n  resetData = () => {\n    imageCards.forEach(imageCard => {\n      imageCard.clicked = false;\n    });\n  };\n\n  onImageClick = id => {\n    count = count + 1;\n    const imageCard = imageCards.find(imageCard => imageCard.id === id);\n\n    if (imageCard.clicked) {\n      this.endGame();\n    } else {\n      this.onCorrectGuess(imageCard);\n    }\n  };\n\n  onCorrectGuess = imageCard => {\n    this.setState({ message: \"Your Guess is Correct\" } );\n    imageCard.clicked = true;\n    this.setState({ imageCards: shuffle(imageCards) });\n  };\n\n  endGame = () => {\n    this.setState({ message: \"Your Guess is Incorrect\" });\n    this.storeTopScore(count);\n    count = 0;\n    this.setState({ imageCards: shuffle(imageCards) });\n    this.resetData();\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar\n          score={count}\n          topScore={topScore}\n          message={this.state.message} \n        />\n        \n        <Wrapper>\n        <Jumbotron />\n\n        <div className=\"container\">\n          <div className=\"row\">\n            {this.state.imageCards.map(imageCard => {\n              return (\n                <ImageCard\n                  imageCard={imageCard}\n                  clickImage={this.onImageClick}\n                />\n              );\n            })}\n          </div>\n        </div>\n        </Wrapper>\n        <Footer/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}